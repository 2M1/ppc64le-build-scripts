diff --git a/src/config/localfile-config.c b/src/config/localfile-config.c
index fdff774292..4514832a0c 100644
--- a/src/config/localfile-config.c
+++ b/src/config/localfile-config.c
@@ -110,10 +110,12 @@ int Read_Localfile(XML_NODE node, void *d1, __attribute__((unused)) void *d2)
             }
             logf[pl].target = OS_StrBreak(',', node[i]->content, count);
             char * tmp;
-            for (n=0; n<count; n++) {
-                os_strdup(w_strtrim(logf[pl].target[n]), tmp);
-                free(logf[pl].target[n]);
-                logf[pl].target[n] = tmp;
+            if(logf[pl].target) {
+                for (n=0; n<count; n++) {
+                    os_strdup(w_strtrim(logf[pl].target[n]), tmp);
+                    free(logf[pl].target[n]);
+                    logf[pl].target[n] = tmp;
+                }
             }
         } else if (strcmp(node[i]->element, xml_localfile_outformat) == 0) {
             char * target = NULL;
diff --git a/src/shared/string_op.c b/src/shared/string_op.c
index 4ea3ee4ca7..c150862c20 100644
--- a/src/shared/string_op.c
+++ b/src/shared/string_op.c
@@ -159,9 +159,11 @@ char * w_strtrim(char * string) {
     char *c;
     char *d;
 
-    string = &string[strspn(string, " ")];
-    for (c = string + strcspn(string, " "); *(d = c + strspn(c, " ")); c = d + strcspn(d, " "));
-    *c = '\0';
+    if(string != NULL) {
+        string = &string[strspn(string, " ")];
+        for (c = string + strcspn(string, " "); *(d = c + strspn(c, " ")); c = d + strcspn(d, " "));
+        *c = '\0';
+    }
     return string;
 }
 
diff --git a/src/wazuh_modules/syscollector/syscollector.h b/src/wazuh_modules/syscollector/syscollector.h
index 90a20c8e52..e6bcb770ff 100644
--- a/src/wazuh_modules/syscollector/syscollector.h
+++ b/src/wazuh_modules/syscollector/syscollector.h
@@ -232,5 +232,8 @@ void getNetworkIface_bsd(cJSON *object, char *iface_name, struct ifaddrs *ifaddr
 // Create the interface list
 int getIfaceslist(char **ifaces_list, struct ifaddrs *ifaddr);
 
+// Initialize hw_info struct values
+void init_hw_info(hw_info *info);
+
 #endif
 #endif
diff --git a/src/wazuh_modules/syscollector/syscollector_bsd.c b/src/wazuh_modules/syscollector/syscollector_bsd.c
index a1257af296..db6cbc34b4 100644
--- a/src/wazuh_modules/syscollector/syscollector_bsd.c
+++ b/src/wazuh_modules/syscollector/syscollector_bsd.c
@@ -599,14 +599,16 @@ void sys_hw_bsd(int queue_fd, const char* LOCATION){
     /* Get CPU and memory information */
     hw_info *sys_info;
     if (sys_info = get_system_bsd(), sys_info){
-        cJSON_AddStringToObject(hw_inventory, "cpu_name", w_strtrim(sys_info->cpu_name));
+        if(sys_info->cpu_name) {
+            cJSON_AddStringToObject(hw_inventory, "cpu_name", w_strtrim(sys_info->cpu_name));
+        }
         cJSON_AddNumberToObject(hw_inventory, "cpu_cores", sys_info->cpu_cores);
         cJSON_AddNumberToObject(hw_inventory, "cpu_MHz", sys_info->cpu_MHz);
         cJSON_AddNumberToObject(hw_inventory, "ram_total", sys_info->ram_total);
         cJSON_AddNumberToObject(hw_inventory, "ram_free", sys_info->ram_free);
         cJSON_AddNumberToObject(hw_inventory, "ram_usage", sys_info->ram_usage);
 
-        free(sys_info->cpu_name);
+        os_free(sys_info->cpu_name);
         free(sys_info);
     }
 
@@ -624,6 +626,7 @@ hw_info *get_system_bsd(){
 
     hw_info *info;
     os_calloc(1, sizeof(hw_info), info);
+    init_hw_info(info);
 
     int mib[2];
     size_t len;
diff --git a/src/wazuh_modules/syscollector/syscollector_linux.c b/src/wazuh_modules/syscollector/syscollector_linux.c
index 0cb1353134..82f460b51c 100644
--- a/src/wazuh_modules/syscollector/syscollector_linux.c
+++ b/src/wazuh_modules/syscollector/syscollector_linux.c
@@ -35,6 +35,20 @@ char* get_mtu(char *ifa_name);                  // Get MTU
 char* check_dhcp(char *ifa_name, int family);   // Check DHCP status for network interfaces
 char* get_default_gateway(char *ifa_name);      // Get Default Gateway for network interfaces
 
+
+// Initialize hw_info structure
+
+void init_hw_info(hw_info *info) {
+    if(info != NULL) {
+        info->cpu_name = NULL;
+        info->cpu_cores = 0;
+        info->cpu_MHz = 0.0;
+        info->ram_total = 0;
+        info->ram_free = 0;
+        info->ram_usage = 0;
+    }
+}
+
 // Get port state
 
 char* get_port_state(int state){
@@ -863,14 +877,17 @@ void sys_hw_linux(int queue_fd, const char* LOCATION){
     /* Get CPU and memory information */
     hw_info *sys_info;
     if (sys_info = get_system_linux(), sys_info){
-        cJSON_AddStringToObject(hw_inventory, "cpu_name", w_strtrim(sys_info->cpu_name));
+        
+        if(sys_info->cpu_name) {
+            cJSON_AddStringToObject(hw_inventory, "cpu_name", w_strtrim(sys_info->cpu_name));
+        }
         cJSON_AddNumberToObject(hw_inventory, "cpu_cores", sys_info->cpu_cores);
         cJSON_AddNumberToObject(hw_inventory, "cpu_MHz", sys_info->cpu_MHz);
         cJSON_AddNumberToObject(hw_inventory, "ram_total", sys_info->ram_total);
         cJSON_AddNumberToObject(hw_inventory, "ram_free", sys_info->ram_free);
         cJSON_AddNumberToObject(hw_inventory, "ram_usage", sys_info->ram_usage);
 
-        free(sys_info->cpu_name);
+        os_free(sys_info->cpu_name);
         free(sys_info);
     }
 
@@ -1051,6 +1068,7 @@ hw_info *get_system_linux(){
     char *end;
 
     os_calloc(1, sizeof(hw_info), info);
+    init_hw_info(info);
 
     if (!(fp = fopen("/proc/cpuinfo", "r"))) {
         mterror(WM_SYS_LOGTAG, "Unable to read cpuinfo file.");
@@ -1817,12 +1835,14 @@ void getNetworkIface_linux(cJSON *object, char *iface_name, struct ifaddrs *ifad
                     char ** parts = NULL;
                     char *ip_addrr;
                     parts = OS_StrBreak('%', host, 2);
-                    ip_addrr = w_strtrim(parts[0]);
-                    cJSON_AddItemToArray(ipv6_addr, cJSON_CreateString(ip_addrr));
-                    for (k=0; parts[k]; k++){
-                        free(parts[k]);
+                    if(parts) {
+                        ip_addrr = w_strtrim(parts[0]);
+                        cJSON_AddItemToArray(ipv6_addr, cJSON_CreateString(ip_addrr));
+                        for (k=0; parts[k]; k++){
+                            free(parts[k]);
+                        }
+                        free(parts);
                     }
-                    free(parts);
                 } else {
                     mterror(WM_SYS_LOGTAG, "getnameinfo() failed: %s\n", gai_strerror(result));
                 }
diff --git a/src/wazuh_modules/syscollector/syscollector_windows.c b/src/wazuh_modules/syscollector/syscollector_windows.c
index bb0089234f..9e5dca16a8 100644
--- a/src/wazuh_modules/syscollector/syscollector_windows.c
+++ b/src/wazuh_modules/syscollector/syscollector_windows.c
@@ -1305,7 +1305,7 @@ void sys_hw_windows(const char* LOCATION){
         if (sys_info->ram_usage)
             cJSON_AddNumberToObject(hw_inventory, "ram_usage", sys_info->ram_usage);
 
-        free(sys_info->cpu_name);
+        os_free(sys_info->cpu_name);
         free(sys_info);
     }
 
@@ -1952,6 +1952,7 @@ hw_info *get_system_windows(){
     DWORD dwCount = MAX_VALUE_NAME;
 
     os_calloc(1,sizeof(hw_info),info);
+    init_hw_info(info);
 
     // Get CPU name and frequency
 
